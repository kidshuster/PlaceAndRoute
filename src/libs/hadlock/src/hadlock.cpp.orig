#include <bits/stdc++.h>

#include "hadlock.h"
#include "graph.h"

namespace NetToMag
{
     cubeGrid HadLock(Graph* wGraph, int dimensions)
    {   
        cubeGrid wGrid = ai1::HadLock(wGraph,dimensions);
        
        return wGrid;
    }
};

namespace ai1
{   
    const int CELL_DIMENSIONS = 6;
    int wDimensions;
    int n;
    int channelSize;

    Graph wGraph;
    cubeGrid wGrid;
    vector<uEdge> edgeQueue;
    map pQueue;

    cubeGrid HadLock(Graph graphI, int dimensionsI)
    {
        //sets global variables
        wDimensions = dimensionsI;
        wGraph = graphI;
        channelSize = CHANNEL_MIN;
        
        SizeGrid();
        PaintGrid();
        //PrintGrid();
        HadlockTop();
        
        return wGrid;
    }

    void SizeGrid()
    {
        
        n = CELL_DIMENSIONS * wDimensions + channelSize * (wDimensions+1);
        for(int i=0; i<2; i++)
            wGrid.push_back(vector<vector<Box>>(n, vector<Box>(n, Box())));

    }

    void PaintGrid()
    {
        array<int,2> wCoordinate;
        int edgeID;
        for (int i=0; i< wGraph->nodes.size();i++)
        {
            node wNode = wGraph->nodes[i];
            wCoordinate = wNode.origin; 

            wCoordinate[0] = CELL_DIMENSIONS * wCoordinate[0] + channelSize * (wCoordinate[0] + 1);
            wCoordinate[1] = CELL_DIMENSIONS * wCoordinate[1] + channelSize * (wCoordinate[1] + 1);

            for (int j=0; j<6; j++)
            {
                for(int k=0; k<6; k++)
                {
                    wGrid[0][j + wCoordinate[0]][k + wCoordinate[1]].type = -1;
                    wGrid[1][j + wCoordinate[0]][k + wCoordinate[1]].type = -1;
                    if (j == 0 && k == 1)
                    {

                        if (wNode.terminals[0] > -1)
                            searchQueue(wNode.terminals[0], j + wCoordinate[0], k + wCoordinate[1]); 
                    }

                    else if (j == 0 && k == 4)
                    {

                        if (wNode.terminals[1] > -1)
                            searchQueue(wNode.terminals[1], j + wCoordinate[0], k + wCoordinate[1]); 
                    }

                    else if (j == 5 && k == 1)
                    {

                        if (wNode.terminals[2] > -1)
                            searchQueue(wNode.terminals[2], j + wCoordinate[0], k + wCoordinate[1]); 
                    }

                    else if (j == 5 && k == 4)
                    {
                        if (wNode.terminals[3] > -1)
                            searchQueue(wNode.terminals[3], j + wCoordinate[0], k + wCoordinate[1]); 
                    } 
                }
            }     
<<<<<<< HEAD
        }
        for (int j=0; j<n; j++)
        {
            for (int k=0; k<n; k++)
            {
                wGrid[0][j][k].hash = j+k;
                wGrid[1][j][k].hash = j+k+2;
            }
=======
>>>>>>> master
        }
    }

    void searchQueue(int id, int x, int y)
    {
        for (int l=0; l < edgeQueue.size(); l++)
        { 
            if (edgeQueue[l].edgeID == id)
            {
                edgeQueue[l].T[0] = 0;
                edgeQueue[l].T[1] = x;
                edgeQueue[l].T[2] = y;
<<<<<<< HEAD
                wGrid[0][x][y].type = -4;
                return;
            }
        }
        uEdge newEdge;
        newEdge.edgeID = id;
        newEdge.S[0] = 0;
        newEdge.S[1] = x;
        newEdge.S[2] = y;
        edgeQueue.push_back(newEdge);
        wGrid[0][x][y].type = -4;
    }
    
    void HadlockTop()
    {
        //for(int i=0; i<edgeQueue.size(); i++)
        for(int i=0; i<1; i++)
        {
            uEdge wEdge = edgeQueue.back();
            edgeQueue.pop_back();
            
            //initialize S
            Box sBox = wGrid[wEdge.S[0]][wEdge.S[1]][wEdge.S[2]];
            Box tBox = wGrid[wEdge.T[0]][wEdge.T[1]][wEdge.T[2]];
            sBox.diffHash = abs(sBox.hash - tBox.hash);
            sBox.ripple = 0;
            pQueue.clear();
            PrintGrid();
            bool status = HadlockNode(wEdge.S, wEdge.T);
            if(status)
            {
                cout << "we made it here yo " << endl;
                BTRecursive(wEdge.S,wEdge.T,wEdge.T);
            }
            else
                cout << "no solution found" << endl;
            PrintGrid();

            //TODO do backtracking - leave spaces for DRC
            //BackTrack(wEdge.T, wEdge.S);                        | 
                                                                                                                                                                           |                                                                                                                                              
        }       
    }

    //TODO will have to return bool, throw false if path not found, increase channel size
    bool HadlockNode(array<int,3> S, array<int,3> T)
    {
        array<array<int,3>,5> coo = {{
                            {   S[0],S[1]+1,S[2]        },
                            {   S[0],S[1]-1,S[2]        },
                            {   S[0],S[1],S[2]+1        },
                            {   S[0],S[1],S[2]-1        },
                            {   (S[0]+1)%2,S[1],S[2]    }
                            }};

        wGrid[S[0]][S[1]][S[2]].type = 4;
        wGrid[T[0]][T[1]][T[2]].type = 4;

        for(int i=0; i<5; i++)
            if(coo[i][1] > 0 && coo[i][0] < n)
                if(coo[i][2] > 0 && coo[i][1] < n)
                {
                    //if(coo[i] == T)
                        //return true;
                    ExpandNode(coo[i],T,wGrid[S[0]][S[1]][S[2]].ripple);
                }
        bool found = true;
        cout << "Queue size: " << pQueue.size() << endl;
        //PrintWave();
        if(pQueue.empty())
            return false;

        found = HadlockNode(pQueue.erase(pQueue.lower_bound(0))->second,T);
        return found;
    }

    void ExpandNode(array<int,3> S, array<int,3> T, int prevripple)
    {
        Box* sBox = &wGrid[S[0]][S[1]][S[2]];
        Box* tBox = &wGrid[T[0]][T[1]][T[2]];
        // do not add occupied cells
        if (sBox->type!=-2  && sBox->type != tBox->type)
            return;
        // do not re add cells
        if (sBox->ripple > -1)
            return;
        cout << "testing " << endl;
        // do not add cells with adjecent full cells
        array<array<int,3>,5> coo = {{
                            {   S[0],S[1]+1,S[2]        },
                            {   S[0],S[1]-1,S[2]        },
                            {   S[0],S[1],S[2]+1        },
                            {   S[0],S[1],S[2]-1        },
                            {   (S[0]+1)%2,S[1],S[2]    }
                            }};
        for(int i=0; i<5; i++)
        {  
            cout << "types" << endl;
            cout << wGrid[coo[i][0]][coo[i][1]][coo[i][2]].type << endl;
            if(coo[i] != T)
                if(coo[i][1] > 0 && coo[i][0] < n)
                    if(coo[i][2] > 0 && coo[i][1] < n)
                        if(wGrid[coo[i][0]][coo[i][1]][coo[i][2]].type != -2)
                            int donothing = 0;
        }

        cout << "testing " << endl;
        bool direction = false;
        bool metal2 = false;
        if(S[1] == T[1] || S[2] == T[2])
            direction = true;
        if(S[0] == 1)
            metal2 = true;
        wGrid[S[0]][S[1]][S[2]].type = -4;

        cout << "sHash " << sBox->hash << endl;
        cout << "tHash " << tBox->hash << endl;
        sBox->diffHash = abs(sBox->hash - tBox->hash);
        sBox->ripple = prevripple + 1 + direction + metal2;
        pQueue.insert(index(sBox->ripple,S));
    }

    void BTRecursive(array<int,3> S, array<int,3> N, array<int,3> P)
    {
        if(N == S)
            return;
        array<array<int,3>,5> coo = {{
                            {   N[0],N[1]+1,N[2]        },
                            {   N[0],N[1]-1,N[2]        },
                            {   N[0],N[1],N[2]+1        },
                            {   N[0],N[1],N[2]-1        },
                            {   (N[0]+1)%2,N[1],N[2]    }
                            }};
        int findRipple=INT_MAX;
        array<int,3> indexA;
        for(int i=0; i<5; i++)
            if(coo[i][1] > 0 && coo[i][0] < n)
                if(coo[i][2] > 0 && coo[i][1] < n)
                    if(coo[i] != P)
                        if(wGrid[coo[i][0]][coo[i][1]][coo[i][2]].ripple < findRipple)
                        {
                            findRipple = wGrid[coo[i][0]][coo[i][1]][coo[i][2]].ripple;
                            indexA = coo[i];
                        }
        if(false)
            wGrid[N[0]][N[1]][N[2]].type = -5; 
        else if(N[0])
            wGrid[N[0]][N[1]][N[2]].type = -4;
        else
            wGrid[N[0]][N[1]][N[2]].type = -3;
        cout << "testing" << endl;
        BTRecursive(S,indexA,N);
=======

                wGrid[0][x][y].type = -2;
                wGrid[0][x][y].ripple = 0;
                return;
            }
        }
        uEdge newEdge;
        newEdge.edgeID = id;
        newEdge.S[0] = 0;
        newEdge.S[1] = x;
        newEdge.S[2] = y;
        edgeQueue.push_back(newEdge);

        wGrid[0][x][y].ripple = 0;
    }
    
    void HadlockTop()
    {
        //for(int i=0; i<edgeQueue.size(); i++)
        for(int i=0; i<1; i++)
        {
            uEdge wEdge = edgeQueue.back();
            edgeQueue.pop_back();
            
            //initialize S
            Box sBox = wGrid[wEdge.S[0]][wEdge.S[1]][wEdge.S[2]];
            Box tBox = wGrid[wEdge.T[0]][wEdge.T[1]][wEdge.T[2]];
            pQueue.clear();
            //PrintGrid();
            bool status = false;
            HadlockNode(wEdge.S, wEdge.T,&status);
            while(true)
            {
                if(pQueue.empty())
                    break;
                if(status)
                    break;
                map::iterator itr = pQueue.lower_bound(0);
                pQueue.erase(itr);
                HadlockNode(itr->second,wEdge.T,&status);
            }

            if(status)
            {
                cout << "we made it here yo " << endl;
                BTRecursive(wEdge.T,wEdge.T,wEdge.S);
            }
            else

                cout << "no solution found" << endl;   
        }       
    }

    void HadlockNode(array<int,3> S, array<int,3> T, bool* status)
    {
        array<array<int,3>,5> coo = {{
                            {   S[0],S[1]+1,S[2]        },
                            {   S[0],S[1]-1,S[2]        },
                            {   S[0],S[1],S[2]+1        },
                            {   S[0],S[1],S[2]-1        },
                            {   (S[0]+1)%2,S[1],S[2]    }
                            }};


        
        for(int i=0; i<5; i++)
        {
            if(coo[i][1] > 0 && coo[i][1] < n)
                if(coo[i][2] > 0 && coo[i][2] < n)
                {

                    if(coo[i] == T)
                        *status = true;
                    ExpandNode(coo[i],S,T,wGrid[S[0]][S[1]][S[2]].ripple);
                }
        }
        //PrintGrid();
    }


    void ExpandNode(array<int,3> N, array<int,3> S, array<int,3> T, int prevripple)
    {
        Box* tBox = &wGrid[T[0]][T[1]][T[2]];
        Box* sBox = &wGrid[S[0]][S[1]][S[2]];  
        Box* nBox = &wGrid[N[0]][N[1]][N[2]]; 
   
        // do not add occupied cells
        if (nBox->type!=-2)
            return;
        // do not re add cells
        if (nBox->ripple > -1)
            return;
        // do not add cells with adjecent full cells
        array<array<int,3>,5> coo = {{
                            {   N[0],N[1]+1,N[2]        },
                            {   N[0],N[1]-1,N[2]        },
                            {   N[0],N[1],N[2]+1        },
                            {   N[0],N[1],N[2]-1        },
                            {   (N[0]+1)%2,N[1],N[2]    }
                            }};
        for(int i=0; i<5; i++)
        {  
            if(coo[i] != S)
                if(coo[i][1] > 0 && coo[i][1] < n)
                    if(coo[i][2] > 0 && coo[i][2] < n)
                       if(wGrid[coo[i][0]][coo[i][1]][coo[i][2]].type != -2)
                            return;
        }

        bool direction = 0;
        int metal2 = 0;
        bool x = 0;
        bool y = 0;

        //if(N[1] != S[1] && N[2] != S[2])
            //direction = 1;
        if(N[0] == 1)
            metal2 = 2;
        if(abs(N[1]-T[1]) > abs(S[1]-T[1]))
            y = 1;
        if(abs(N[2]-T[2]) > abs(S[2]-T[2]))
            x = 1;         
        nBox->ripple = prevripple + x + y + direction + metal2;
        pQueue.insert(index(sBox->ripple,N));
    }

    void BTRecursive(array<int,3> N, array<int,3> S, array<int,3> T)
    { 
        if(T == N)
            return;
        cout << "testing1 " << endl;
        array<array<int,3>,5> coo = {{
                            {   N[0],N[1]+1,N[2]        },
                            {   N[0],N[1]-1,N[2]        },
                            {   N[0],N[1],N[2]+1        },
                            {   N[0],N[1],N[2]-1        },
                            {   (N[0]+1)%2,N[1],N[2]    }
                            }};
        int findRipple=INT_MAX;
        Box temp;  
        array<int,3> indexA;
        for(int i=0; i<5; i++)
        {
            temp = wGrid[coo[i][0]][coo[i][1]][coo[i][2]];
            if(coo[i][1] > 0 && coo[i][0] < n)
                if(coo[i][2] > 0 && coo[i][1] < n)

                    if(coo[i] != S)
                        if(temp.ripple > -1)
                            if(temp.ripple < findRipple)
                            {
                                findRipple = temp.ripple;
                                indexA = coo[i];
                            }
                            else if(temp.ripple == findRipple)
                                if(IsCloser(coo[i],indexA,T));
                                {
                                    findRipple = temp.ripple;
                                    indexA = coo[i];
                                }
                                    

        }
        cout << "testing2 " << endl;
        if(N[0] != S[0])
            wGrid[S[0]][S[1]][S[2]].type = -5; 
        else if(N[0])
            wGrid[S[0]][S[1]][S[2]].type = -4;
        else

            wGrid[S[0]][S[1]][S[2]].type = -3;
        cout << "testing3" << endl;
        PrintGrid();
        BTRecursive(indexA,N,T);
    }

    bool IsCloser(array<int,3> N, array<int,3> S, array<int,3> T)
    {
        if(abs(N[1]-T[1]) < abs(S[1]-T[1]))
            return true;
        if(abs(N[2]-T[2]) < abs(S[2]-T[2]))
            return true;
        return false;
>>>>>>> master
    }

    void PrintGrid()
    {
        cout << "\033[2J\033[1;1H";
        cout << "Printing Grid" << endl;
        for (int j=0; j<n; j++)
        {
            for (int i=0; i<2; i++)
            {
                for (int k=0; k<n; k++)
<<<<<<< HEAD
                    if(wGrid[i][j][k].type == -1)
                        cout<<"*";
                    else if(wGrid[i][j][k].type == -2)
                        cout<<" ";
                    else if(wGrid[i][j][k].type == -3)
                        cout<<"0";
                    else if(wGrid[i][j][k].type == -4)
                        cout<<"o";
                    else if(wGrid[i][j][k].type == -5)
                        cout<<"X";
                    else if(wGrid[i][j][k].type == 2)
                        cout<<"T";
                    else if(wGrid[i][j][k].type == 3)
                        cout<<"S";
                    else if(wGrid[i][j][k].type == 4)
                        cout<<"V";
=======

                    if(true)
                    {
                        if(wGrid[i][j][k].type == -1)
                            cout<<setw(4)<<"*";
                        else if(wGrid[i][j][k].type == -3)
                            cout<<setw(4)<<"H";
                        else if(wGrid[i][j][k].type == -4)
                            cout<<setw(4)<<"o";
                        else if(wGrid[i][j][k].type == -5)
                            cout<<setw(4)<<"X";
                        else if(wGrid[i][j][k].type == 2)
                            cout<<setw(4)<<"T";
                        else if(wGrid[i][j][k].type == 3)
                            cout<<setw(4)<<"S";
                        else if(wGrid[i][j][k].type == 4)
                            cout<<setw(4)<<"V";
                        else if(wGrid[i][j][k].ripple > -1)
                            cout<<setw(4)<<wGrid[i][j][k].ripple;
                        else if(wGrid[i][j][k].type == -2)
                            cout<<setw(4)<<" ";
                    }
                    else
                    {
                        if(wGrid[i][j][k].type == -1)
                            cout<<"*";
                        else if(wGrid[i][j][k].type == -3)
                            cout<<"0";
                        else if(wGrid[i][j][k].type == -4)
                            cout<<"o";
                        else if(wGrid[i][j][k].type == -5)
                            cout<<"X";
                        else if(wGrid[i][j][k].type == 2)
                            cout<<"T";
                        else if(wGrid[i][j][k].type == 3)
                            cout<<"S";
                        else if(wGrid[i][j][k].type == 4)
                            cout<<"V";
                        else if(wGrid[i][j][k].type == -2)
                            cout<<" ";
                    }
>>>>>>> master
                cout << " | ";
            }
            cout << endl;
        }
        cout << endl;
    }

    void PrintQueue()
    {
        map::iterator itr;
        cout << "Printing Queue" << endl;
        for(itr = pQueue.begin(); itr != pQueue.end(); ++itr)
            cout    << setw(5) << itr->first << ": "
                    << setw(5) << itr->second[0] << " , "
                    << setw(5) << itr->second[1] << " , "
                    << setw(5) << itr->second[2] << " , "
                    << endl;
        cout        << endl;        
    }

    void PrintWave()
    {
        cout << "Printing Grid" << endl;
        for (int j=0; j<n; j++)
        {
            for (int i=0; i<2; i++)
            {
                for (int k=0; k<n; k++)
<<<<<<< HEAD
                    cout << setw(3) << wGrid[i][j][k].ripple;
=======
                    if(wGrid[i][j][k].ripple != -1)
                        cout << setw(2) << wGrid[i][j][k].ripple;
                    else
                        cout << "  ";
>>>>>>> master
                cout << " | ";
            }
            cout << endl;
        }
        cout << endl; 
    }
};
